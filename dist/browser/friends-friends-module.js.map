{"version":3,"sources":["webpack:///./src/app/friends/chats/chats.component.css","webpack:///./src/app/friends/chats/chats.component.html","webpack:///./src/app/friends/chats/chats.component.ts","webpack:///./src/app/friends/chats/store/chats.effects.ts","webpack:///./src/app/friends/chats/store/chats.reducers.ts","webpack:///./src/app/friends/friends-routing.module.ts","webpack:///./src/app/friends/friends.component.css","webpack:///./src/app/friends/friends.component.html","webpack:///./src/app/friends/friends.component.ts","webpack:///./src/app/friends/friends.module.ts","webpack:///./src/app/friends/store/friends.effects.ts","webpack:///./src/app/friends/store/friends.reducers.ts","webpack:///./src/app/shared/emptyStringCheck.directive.ts"],"names":[],"mappings":"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","file":"friends-friends-module.js","sourcesContent":["module.exports = \".chatarea{\\n  height: 75vh\\n}\\n\\n.chatmessages{\\n  flex-grow: 1;\\n  overflow-y: auto;\\n  scroll-behavior: smooth;\\n  border: 1px solid rgba(0,0,0,0.4);\\n}\\n\\n.messagetouser{\\n  position: -webkit-sticky;\\n  position: sticky;\\n  top: 1em;\\n  text-align: center;\\n  font-size: 80%;\\n}\\n\\n/*.chatmessages ol{\\n  list-style-type: none;\\n  padding: 1vw 1vh;\\n  margin: 0;\\n}\\n\\n.chatmessages ol > li > h4{\\n  line-height: 0;\\n}*/\\n\\n.chatmessages .mat-list{\\n  padding: 1vw 1vh;\\n  margin: 0;\\n  height: initial;\\n}\\n\\n.chatmessages .mat-list .mat-list-item{\\n  height: initial;\\n  margin: 1em auto;\\n}\\n\\n.chatmessages .mat-line {\\n  white-space: normal;\\n}\\n\\n.chatfooter{\\n  flex-shrink: 0;\\n}\\n\\n.mat-raised-button{\\n  margin: 1em;\\n}\\n\"","module.exports = \"<div class=\\\"chatarea\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"1vh\\\">\\n  <div class=\\\"chatmessages\\\" #chatmessages>\\n    <p class=\\\"messagetouser\\\">{{messageToUser}}</p>\\n    <mat-list>\\n      <mat-list-item *ngFor=\\\"let chat of (curChatList|async)\\\" [ngStyle]=\\\"{'text-align':chat.direction==='FROM'?'right':'left'}\\\">\\n        <h4 matLine *ngIf=\\\"chat.direction==='TO';else friendName\\\" style=\\\"font-weight: bold\\\">{{userName}}:</h4>\\n        <ng-template #friendName>\\n          <h4 matLine style=\\\"font-weight: bold\\\">{{friendSelected.name}}:</h4>\\n        </ng-template>\\n        <p matLine>\\n          <span>{{chat.content}}</span>\\n        </p>\\n      </mat-list-item>\\n    </mat-list>\\n  </div>\\n  <mat-divider></mat-divider>\\n  <div class=\\\"chatfooter\\\">\\n    <form (ngSubmit)=\\\"onSendChatMessage(f)\\\" #f=\\\"ngForm\\\" fxLayout=\\\"row\\\">\\n      <mat-form-field  fxFlex=\\\"1 0 auto\\\">\\n        <input matInput ngModel name=\\\"chatMessage\\\" type=\\\"text\\\" placeholder=\\\"Enter a message here\\\" autocomplete=\\\"off\\\" emptyStringCheck #chatInput=\\\"ngModel\\\">\\n        <mat-error *ngIf=\\\"chatInput.invalid\\\">Please enter proper value.</mat-error>\\n      </mat-form-field>\\n      <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"!friendAvailable||chatInput.invalid\\\">Send</button>\\n    </form>\\n  </div>\\n</div>\\n\"","import { Component, OnInit, OnDestroy, ViewChild, QueryList, ElementRef, Renderer2 } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as fromChats from './store/chats.reducers';\nimport * as ChatsActions from './store/chats.actions';\nimport * as FriendsActions from '../store/friends.actions';\nimport { Subscription, Observable } from 'rxjs';\nimport { skipWhile, take } from 'rxjs/operators';\nimport { NgForm } from '@angular/forms';\nimport { SocketService } from '../../shared/socket.service';\nimport { Chat } from '../../models/chat.model';\nimport { MatListItem, MatList } from '@angular/material';\n\n@Component({\n  selector: 'app-chats',\n  templateUrl: './chats.component.html',\n  styleUrls: ['./chats.component.css']\n})\nexport class ChatsComponent implements OnInit, OnDestroy {\n  messageToUser='Select an available friend to start chatting!';\n  friendAvailable = false;\n  curChatList: Observable<Chat[]>;\n  userName: string;\n\n  friendSelected: {email:string, name:string, online:boolean};\n  private friendSelectedSub: Subscription;\n  private socketSub: Subscription;\n  private timeoutid: any;\n\n  // getting a reference to the overall list, which is the parent container of the list items\n  @ViewChild('chatmessages' ,{read: ElementRef}) chatList: ElementRef;\n\n  // getting a reference to the items/messages within the list\n  // @ViewChildren(MatListItem, { read: ElementRef }) chatListItems: QueryList<MatListItem>;\n\n  constructor(private store: Store<fromChats.FeatureState>, private socketService: SocketService, private renderer: Renderer2) {}\n\n  ngOnInit() {\n    this.store.select('auth','name').pipe(\n      take(1)\n    ).subscribe((name)=>this.userName=name);\n\n    this.curChatList = this.store.select('chats','curChatList');\n\n    this.friendSelectedSub= this.store.select('chats','friendSelected').subscribe(\n      (friendSelected)=>{\n        if(!friendSelected) return;\n        this.friendSelected = friendSelected;\n        if(friendSelected.online){\n          this.messageToUser = `You are chatting with ${friendSelected.name}.`;\n          this.friendAvailable = true;\n        }else{\n          this.messageToUser = `${friendSelected.name} is currently offline.`\n          this.friendAvailable = false;\n        }\n        this.scrollToBottom();\n      }\n    );\n\n    this.socketSub = this.socketService.onNewChatMessageReceived().subscribe(\n      (chatItem)=>{\n        console.log('chat received ',chatItem);\n        //if a friend is selected and there's message from the selected friend, update the chat array\n        if(this.friendSelected&&this.friendSelected.email===chatItem.email&&this.friendSelected.name===chatItem.name){\n          this.store.dispatch(new ChatsActions.UpdateChatArray(chatItem));\n          this.scrollToBottom();\n        }else\n          this.store.dispatch(new FriendsActions.UpdateFriendChatStatus({email:chatItem.email, name:chatItem.name, status: 'NEW'}));\n        //else update the 'new chat status' for this friend\n      }\n    )\n  }\n\n  // ngAfterViewInit(){\n  //   this.chatListItems.changes.subscribe(\n  //     (ele) => {\n  //       const parent = this.renderer.parentNode(ele.first.nativeElement);\n  //       console.log('ele parent ',parent);\n  //     }\n  //   )\n  // }\n\n  private scrollToBottom(){\n    //needs some delay in getting the real scroll height value\n    if(this.timeoutid)clearTimeout(this.timeoutid);\n    this.timeoutid = setTimeout(()=>{\n      const divEle : HTMLDivElement = this.chatList.nativeElement//this may crap in SSR\n      console.log('chatlist change  ', divEle.scrollHeight, ' : ', divEle.scrollWidth );\n      // this.getMatList.setScrollTop(realscr);\n      this.renderer.setProperty(divEle,'scrollTop',divEle.scrollHeight);\n    },200);\n  }\n\n  onSendChatMessage(myForm: NgForm){\n   let chat: string = myForm.value.chatMessage;\n\n   const newChatItem = {content:chat,created:new Date(Date.now()),direction:'TO'};\n   //push this chat to cur chat state\n   this.store.dispatch(new ChatsActions.UpdateChatArray(newChatItem));\n\n   if(this.friendSelected.online)\n    this.socketService.sendChatMessageTo({email:this.friendSelected.email,name:this.friendSelected.name},newChatItem);\n\n   myForm.reset();\n   this.scrollToBottom();\n  }\n\n  ngOnDestroy(){\n    if(this.friendSelectedSub) this.friendSelectedSub.unsubscribe();\n    if(this.socketSub) this.socketSub.unsubscribe();\n    if(this.timeoutid)clearTimeout(this.timeoutid);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {Effect, Actions} from '@ngrx/effects';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nimport { environment } from '../../../../environments/environment';\nimport * as ChatsActions from './chats.actions';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\nconst SERVER_PATH = environment.server;\n\n@Injectable()\nexport class ChatsEffects{\n  @Effect()\n  selectFriend = this.actions$.ofType(ChatsActions.SELECT_FRIEND).pipe(\n    map((action: ChatsActions.SelectFriend)=>action.payload),\n    switchMap((friend: {email:string, name:string, online:boolean})=>{\n      return this.httpClient.get(SERVER_PATH+'/friends/readallchats/'+friend.email+'/'+friend.name,\n            {\n                observe:'body',\n                responseType:'json'\n            }).pipe(\n            catchError(err =>{\n              console.log(\"error reading chats \",err);\n              return of(err);\n            })\n          );\n    }),\n    switchMap((resp)=>{\n      if (resp instanceof HttpErrorResponse){\n        return of({type:ChatsActions.READ_CHAT_FAIL, payload: resp['error']});\n      }\n      return of({type:ChatsActions.STORE_CHAT_ARRAY, payload: resp['chat']});\n    })\n  )\n\n  constructor(private actions$: Actions, private httpClient: HttpClient){}\n}\n","import * as ChatsActions from './chats.actions';\nimport * as fromFriends from '../../store/friends.reducers';\nimport { Chat } from '../../../models/chat.model';\n\nexport interface FeatureState extends fromFriends.FeatureState{\n  chats: State;\n}\n\nexport interface State{\n  friendSelected: {email: string, name: string, online:boolean},\n  curChatList: Chat[],\n  read_chat_fail: string\n}\n\nconst initialState: State ={\n  friendSelected: null,\n  curChatList: new Array<Chat>(),\n  read_chat_fail: null\n}\n\nexport function chatsReducer(state=initialState, action: ChatsActions.ChatsActions){\n  switch(action.type){\n    case(ChatsActions.SELECT_FRIEND):\n      return{\n        ...state,\n        friendSelected: action.payload\n      }\n    case(ChatsActions.UPDATE_SELECTED_FRIEND_STATUS)://only update status if this is the selected friend\n      if(!state.friendSelected||state.friendSelected.email!==action.payload.email||state.friendSelected.name!==action.payload.name)\n        return state;\n      else{\n        return{\n          ...state,\n          friendSelected: action.payload\n        }\n      }\n    case(ChatsActions.STORE_CHAT_ARRAY):\n      return{\n        ...state,\n        curChatList: action.payload,\n        read_chat_fail: null\n      }\n    case(ChatsActions.UPDATE_CHAT_ARRAY):\n      const newChatList = [...state.curChatList, action.payload];\n      return{\n        ...state,\n        curChatList: newChatList\n      }\n    case(ChatsActions.READ_CHAT_FAIL):\n      return{\n        ...state,\n        read_chat_fail: action.payload\n      }\n    case(ChatsActions.CLEAR_STORE):\n      return{\n        ...state,\n        ...initialState\n      }\n    default:\n      return state;\n  }\n}\n","import { Routes, RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { FriendsComponent } from './friends.component';\n\nconst friendsRoutes: Routes = [\n  {path: '', component: FriendsComponent}\n]\n\n@NgModule({\n  imports:[\n    RouterModule.forChild(friendsRoutes)\n  ],\n  exports: [RouterModule]\n})\n\nexport class FriendsRoutingModule{}\n","module.exports = \".friendslist{\\n  height: 70vh;\\n  overflow: auto;\\n  padding: 2vw 0;\\n}\\n\\nmat-card{\\n  /*display: inline-block;*/\\n  padding: 8px;\\n  border-radius: 6px;\\n  text-align: left;\\n  margin-bottom: 10px;\\n  max-width: 8em;\\n  cursor: pointer;\\n}\\n\\nmat-card-header{\\n  display: inline-flex;\\n}\\n\\nmat-card-title{\\n  /*width: 3.8em;*/\\n  word-wrap: break-word;\\n  margin-bottom: 0.6em;\\n}\\n\\nmat-card-subtitle{\\n  margin-top: 0px;\\n  margin-bottom: 8px;\\n}\\n\\n.blink_me {\\n  -webkit-animation: blinker 1s linear infinite;\\n          animation: blinker 1s linear infinite;\\n}\\n\\n@-webkit-keyframes blinker {\\n  50% {\\n    opacity: 0;\\n  }\\n}\\n\\n@keyframes blinker {\\n  50% {\\n    opacity: 0;\\n  }\\n}\\n\"","module.exports = \"<div fxLayout=\\\"row\\\" fxLayoutGap=\\\"1vh\\\" fxLayoutAlign=\\\"center\\\">\\n  <div fxFlex=\\\"15vw\\\" class=\\\"friendslist\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start end\\\">\\n    <p class=\\\"error\\\" *ngIf=\\\"friendsErrorState\\\">{{friendsErrorState|async}}</p>\\n    <mat-card *ngFor=\\\"let friend of friendsListState|async\\\"\\n    [ngStyle]=\\\"{'background-color':friend.online?'lightgreen':'indianred'}\\\"\\n    [ngClass]=\\\"{'blink_me':friend.status==='NEW'}\\\"\\n    (click)=\\\"onFriendSelected(friend,$event)\\\">\\n      <mat-card-header>\\n        <img mat-card-avatar alt={{friend.name}} src={{friend.avatar}}>\\n        <mat-card-title>{{friend.name}}</mat-card-title>\\n        <mat-card-subtitle>{{convertToAge(friend.dob)}}</mat-card-subtitle>\\n        <mat-card-subtitle><i>{{checkOnline(friend.online)}}</i></mat-card-subtitle>\\n      </mat-card-header>\\n    </mat-card>\\n  </div>\\n  <!-- <mat-divider [vertical]=\\\"true\\\"></mat-divider> -->\\n  <div fxFlex=\\\"0 1 60vw\\\">\\n    <app-chats></app-chats>\\n  </div>\\n</div>\\n\"","import { Component, OnInit, OnDestroy, Renderer2, ViewChildren, QueryList, ElementRef } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { User } from '../models/user.model';\n\nimport * as fromFriends from './store/friends.reducers';\nimport * as FriendsActions from './store/friends.actions';\nimport * as ChatsActions from './chats/store/chats.actions';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { SocketService } from '../shared/socket.service';\n\n@Component({\n  selector: 'app-friends',\n  templateUrl: './friends.component.html',\n  styleUrls: ['./friends.component.css']\n})\nexport class FriendsComponent implements OnInit, OnDestroy {\n\n  friendsListState: Observable<User[]>;\n  friendsErrorState: Observable<String>;\n  private userSub: Subscription;\n\n  prev_selected_matCard: ElementRef; //Assign with type ElementRef ok, but don't access the nativeElement\n\n  constructor(private store: Store<fromFriends.FeatureState>, private socketService: SocketService, private renderer: Renderer2) { }\n\n  ngOnInit() {\n    this.store.dispatch(new FriendsActions.GetFriendsList());\n    this.friendsListState = this.store.select('friends','friendsList');\n    this.friendsErrorState = this.store.select('friends','friends_fail_message');\n\n    //only need to listen to friend online status change here\n    //since will get fresh friends list everytime friends component init again\n    this.userSub = this.socketService.onFriendOnlineStatusChanged().subscribe(\n      (friend: User)=>{\n        console.log('friends online status',friend);\n        this.store.dispatch(new FriendsActions.UpdateFriendOnlineStatus(friend));\n        //friend list wont be updated if no such friend is found\n        this.store.dispatch(new ChatsActions.UpdateSelectedFriendStatus({email:friend.email,name:friend.name,online:friend.online}));\n      }\n    )\n  }\n\n  convertToAge(date){\n    const age = new Date(Date.now()).getFullYear() - new Date(date).getFullYear();\n    return age;\n  }\n\n  checkOnline(online){\n    if(online)return 'online';\n    else return 'offline';\n  }\n\n  onFriendSelected(friend: User,event){\n    // console.log('selected:',event,' ',event.target);\n    const matCard = this.getToMatCardRootEle(event.target);\n    if(matCard){\n      if(this.prev_selected_matCard) this.renderer.removeStyle(this.prev_selected_matCard,'border');\n      this.renderer.setStyle(matCard,'border','.2em inset blueviolet');\n      this.prev_selected_matCard = matCard;\n    }\n\n    this.store.dispatch(new ChatsActions.SelectFriend({email:friend.email,name:friend.name,online:friend.online}));\n    //---- need to update the status from NEW to READ\n    if(friend.status==='NEW') this.store.dispatch(new FriendsActions.UpdateFriendChatStatus({email:friend.email,name:friend.name,status:'READ'}));\n  }\n\n  private getToMatCardRootEle(ele){\n    let rootMatCard;\n    let max_try = 0;//i dont want this to become infinite loop! its just aesthetic fix\n    if(!ele) return;\n    while(ele.tagName!=='MAT-CARD'&&max_try<=6){\n      ele = this.renderer.parentNode(ele);\n      max_try++;\n    }\n    if (ele.tagName==='MAT-CARD') return ele;\n    else return;\n  }\n\n  ngOnDestroy(){\n    if(this.userSub)this.userSub.unsubscribe();\n  }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { FriendsComponent } from \"./friends.component\";\nimport { ChatsComponent} from './chats/chats.component';\nimport { SharedModule } from \"../shared/shared.module\";\nimport { FriendsRoutingModule } from \"./friends-routing.module\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { chatsReducer } from './chats/store/chats.reducers';\nimport { friendsReducer } from './store/friends.reducers';\nimport { FriendsEffects } from \"./store/friends.effects\";\nimport { ChatsEffects } from \"./chats/store/chats.effects\";\nimport { EmptyStringCheckDirective } from \"../shared/emptyStringCheck.directive\";\n\n@NgModule({\n  declarations:[\n    FriendsComponent,\n    ChatsComponent,\n    EmptyStringCheckDirective\n  ],\n  imports:[\n    FriendsRoutingModule,\n    SharedModule,\n    StoreModule.forFeature('chats',chatsReducer),\n    StoreModule.forFeature('friends',friendsReducer),\n    EffectsModule.forFeature([FriendsEffects,ChatsEffects])\n\n  ]\n})\n\nexport class FriendsModule{}\n","import { Injectable } from '@angular/core';\nimport {Effect, Actions} from '@ngrx/effects';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nimport { environment } from '../../../environments/environment';\nimport * as FriendsActions from './friends.actions';\nimport { switchMap, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\nconst SERVER_PATH = environment.server;\n\n@Injectable()\nexport class FriendsEffects{\n  @Effect()\n  fetchFriendsList = this.actions$.ofType(FriendsActions.GET_FRIENDS_LIST).pipe(\n    switchMap(()=>{\n      return this.httpClient.get(SERVER_PATH+'/friends/getallfriends',\n              {\n                  observe:'body',\n                  responseType:'json'\n              }).pipe(\n              catchError(err =>{\n                console.log(\"error getting friends \",err);\n                return of(err);\n              })\n            );\n    }),\n    switchMap((resp)=>{\n      if (resp instanceof HttpErrorResponse){\n        return of({type:FriendsActions.GET_FRIENDS_FAIL, payload: resp['error']});\n      }\n      return of({type:FriendsActions.STORE_FRIENDS_LIST, payload: resp['friends']});\n    })\n  );\n\n\n  constructor(private actions$: Actions, private httpClient: HttpClient){}\n}\n","import * as FriendsActions from './friends.actions';\nimport * as fromApp from '../../store/app.reducers';\nimport { User } from '../../models/user.model';\n\nexport interface FeatureState extends fromApp.AppState{\n  friends: State;\n}\n\nexport interface State{\n  friendsList: User[];\n  friends_fail_message: String;\n}\n\nconst initialState: State ={\n  friendsList: new Array<User>(),\n  friends_fail_message: null\n}\n\nexport function friendsReducer(state=initialState, action: FriendsActions.FriendsActions){\n  switch(action.type){\n    case(FriendsActions.STORE_FRIENDS_LIST):\n      return{\n        ...state,\n        friendsList: [...action.payload],\n        friends_fail_message: null\n      }\n    case(FriendsActions.GET_FRIENDS_FAIL):\n      return{\n        ...state,\n        friends_fail_message: action.payload\n      }\n    case(FriendsActions.UPDATE_FRIEND_ONLINE_STATUS):\n      const oldList = [...state.friendsList];\n      const oldFriendInd = oldList.findIndex((friend)=>friend.email===action.payload.email&&friend.name===action.payload.name);\n      if(oldFriendInd>-1)oldList[oldFriendInd].online = action.payload.online;\n      return{\n        ...state,\n        friendsList: [...oldList]\n      }\n    case(FriendsActions.UPDATE_FRIEND_CHAT_STATUS):\n      const statusList = [...state.friendsList];\n      const oldInd = statusList.findIndex((friend)=>friend.email===action.payload.email&&friend.name===action.payload.name);\n      if(oldInd>-1)statusList[oldInd].status = action.payload.status;\n      return{\n        ...state,\n        friendsList: [...statusList]\n      }\n    case(FriendsActions.CLEAR_STORE):\n      return{\n        ...state,\n        ...initialState\n      }\n    default:\n      return state;\n  }\n}\n","import { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\nimport { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[emptyStringCheck]',\n  providers: [{provide: NG_VALIDATORS, useExisting: EmptyStringCheckDirective, multi: true}]\n})\nexport class EmptyStringCheckDirective implements Validator {\n  validate(control: AbstractControl): {[key: string]: any} {\n    if(!control.value) return null;\n    if(!control.value.trim()){\n      return {'emptyStringCheck':'string is empty!'};\n    }\n    else return null\n  }\n}\n"],"sourceRoot":""}